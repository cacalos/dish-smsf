# Default values for dish_smsf.
# This is a YAML-formatted file.
# Declare variables to be passed into your templates.

replicaCount: 1

nameOverride: ""
fullnameOverride: ""

deployment:
  hostAliases:
  - ip: "192.168.7.180"
    hostnames:
    - "amf.uangel.com"
    - "udm.uangel.com"

  containers:
    usmsf:
      image: camel.uangel.com:5000/usmsf:latest
      #image: camel.uangel.com:5000/usmsf:ph3_test
      imagePullPolicy: Always
      # useManualStart: "true"인 경우 해당 container를 자동으로 기동시키지 않는다. (default: "false")
      useManualStart: false
      healthCheck:
        liveness:
          #sendProbe: true
          sendProbe: false
          initialDelaySeconds: 10
          periodSeconds: 10
        readiness:
          #sendProbe: true
          sendProbe: false
          initialDelaySeconds: 10
          periodSeconds: 5
      resources:
        limits:
          cpu: 2000m
          memory: 4096M
        requests:
          cpu: 2000m
          memory: 2048M
        
    redisServer:
      image: camel.uangel.com:5000/svc_redis:latest
      imagePullPolicy: Always
      containerPort: 6379
    emsubagt:
      image: camel.uangel.com:5000/emsubagt:latest
      imagePullPolicy: Always
  volumes:
    config:
      name: "config-volume"
    sharedData:
      name: "shared-data"
    log:
      name: "log-volume"

service:
  annotations:
    aws:
      service.beta.kubernetes.io/aws-load-balancer-type: "nlb"
      service.beta.kubernetes.io/aws-load-balancer-internal: 0.0.0.0/0
  #type: "LoadBalancer"
  #type: "ClusterIP"
  type: "NodePort"
  ports:
    httpNFServer:
      #nodePort: 30081
      nodePort: 31081
    httpsNFServer:
      #nodePort: 30082
      nodePort: 31082

#imagePullSecrets:
#- name: harbor-secret

secret:
  name:
    accessTokenChecker: "usmsf-secret-for-access-token-check"

configmap:
  name: "usmsf-conf"

  usmsfConf:
    usePprof: false

    # true:  NRF와 NF Discovery 연동 없이 "nrf-local-config"에 설정된 NF profile을 사용한다.
    # false: NRF와 NF Discovery 연동을 통해 NF profile을 얻은 후 이 값을 사용한다.
    useLocalNFProfile: false

    # not_use:         OAuth Access Token을 사용하지 않는다. (NRF로부터 구해오지도 않고, 다른 NF로 전송하지도 않음)
    # use_nrf_token:   OAuth Access Token을 사용한다. (NRF로부터 구해온 token 사용)
    # use_local_token: OAuth Access Token을 사용한다. (NRF로부터 구해오지 않고 local config에 설정된 token 사용)
    oauthTokenScheme: use_nrf_token

    # NF로부터 받은 요청 메시지 내 access token 검사 여부
    #shouldCheckAccessToken: true

    # true로 설정 시, H2C 사용
    useH2C: false

    useUccmsClient: false

    # true로 설정 시, Liveness/Readiness probe 처리 기능 활성화
    useHealthCheck: false

    timer:
      internalRouter:
        serviceRequestTimeout: 2s
      scpClient:
        discoveredCacheKeepingTime: 10m
        serviceRequestTimeout: 10s

    healthCheck:
      # kubelet으로부터 liveness/readiness probe 요청을 수신할 포트
      listenPort: 18080

      livenessCheck:

        # true인 경우에만 liveness checker 동작
        enabled: true

        # true:  백그라운드에서 주기적으로 liveness 검사 (주기: asyncCheckInterval)
        # false: kubelet으로부터 liveness probe 수신 시에만 liveness 검사
        useAsyncCheck: false

        # useAsyncCheck=true인 경우에만 유효
        asyncCheckInterval: 10s

       # Probe에 대한 응답을 강제로 특정 값으로 설정하도록 시뮬레이션하고자 할 때 사용
        simulationMode:

          # true: 시뮬레이션 모드로 동작, false: 일반 모드로 동작
          enabled: false

          # true: 에러로 응답, false: 성공으로 응답
          returnError: true

      readinessCheck:

        # 각 필드 설명은 livenessCheck 참조

        enabled: false
        useAsyncCheck: false
        asyncCheckInterval: 5s
        simulationMode:
          enabled: false
          returnError: true

    nfServer:
      scheme:
        sigtran: "http"
        diameter: "http"
      https:
        idleTimeout: "100s"
    mariaDB:
      dbname: "smsf"
      user: "root"
      pwd: "root.123"
    instanceUCCMSDB:
      dbname: "uccms"
      user: "root"
      pwd: "root.123"
    redis:
      localStore:
        serverURI: "localhost:6379"
        pingInterval: "1m"
        keyExpireTimeout: "12h"
      pubSub:
        serverURI: "localhost:6379"
        pingInterval: "1m"
    nrfClientForRegister:
      uri: "http://192.168.7.180:32222"
    nrfClientForDiscovery:
      uri: "http://192.168.7.180:32222"
    logger:
      logLevels:
        root: "ERROR"
        com_uangel: "ERROR"
        samsung:
          fault: "ERROR"
          selfdiag: "ERROR"
          reset: "ERROR"
          init: "ERROR"
          console: "ERROR"
          error: "ERROR"
          event: "ERROR"
          info: "ERROR"
    trace:
      onoff: "true"
    metric:
      nf:
        reportInterval: 1s

