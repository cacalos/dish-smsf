apiVersion: v1
kind: ConfigMap
metadata:
  name: {{ .Values.configmap.name }}
  namespace: {{ .Release.Namespace }}
binaryData:
  server.p12: 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
  smsf.uangel.com.p12: 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
data:
  {{- $dirpath := printf "configfiles/*.{json,yaml}" }}
  {{- range $path, $_ := .Files.Glob $dirpath }}
  {{ base $path }}: |-
  {{ $.Files.Get $path | nindent 4 }}
  {{- end }}

  rootca.crt: |
    -----BEGIN CERTIFICATE-----
    MIIDpjCCAo4CCQDJAMHwEds/JjANBgkqhkiG9w0BAQUFADCBlDELMAkGA1UEBhMC
    S08xDjAMBgNVBAgMBVNlb3VsMRAwDgYDVQQHDAdHYW5nTmFtMRgwFgYDVQQKDA9F
    eGFtcGxlUHVibGljQ0ExEjAQBgNVBAsMCUV4YW1wbGVDQTETMBEGA1UEAwwKcm9v
    dGNhLmNvbTEgMB4GCSqGSIb3DQEJARYRaXR0ZWNoQHJvb3RjYS5jb20wHhcNMTkw
    ODA2MDc1MDE1WhcNMjAwODA1MDc1MDE1WjCBlDELMAkGA1UEBhMCS08xDjAMBgNV
    BAgMBVNlb3VsMRAwDgYDVQQHDAdHYW5nTmFtMRgwFgYDVQQKDA9FeGFtcGxlUHVi
    bGljQ0ExEjAQBgNVBAsMCUV4YW1wbGVDQTETMBEGA1UEAwwKcm9vdGNhLmNvbTEg
    MB4GCSqGSIb3DQEJARYRaXR0ZWNoQHJvb3RjYS5jb20wggEiMA0GCSqGSIb3DQEB
    AQUAA4IBDwAwggEKAoIBAQCrY5TNXierpwTIq4s9Xw6QH3/RVal0vaM/jMohV8O9
    PySR5PcHvnSpPv+DqNaa9e6l7INTZlj6eL+A7kTGJ69A98BKOiGpN/COL4obCLCS
    os2Xv4Y9WJiH/nf0F1wHjO4tlvOfc604YiVhmUDkab2/HbU36A6f2n++TfHvc6aN
    9j2mljPazkyzIFm5DwAnwon4Q4bLe7BNCxWZTjz16E/RvsxqmSyqfIkYhffwtFJG
    YUBiL/bNMVFeIJoOBCHcZ0UO5+5LpNXFN3Uaf1DfgGsjMl8CEvr7jlQH0jDB2DN9
    o7PAO1mAgFXytveOhvkSlZebUYEedjEz1sSJ5sGAe/XTAgMBAAEwDQYJKoZIhvcN
    AQEFBQADggEBAGTH2iB5xeONdF3iruTjIvdrDXRcDWe8UqlyG0sZjxlYLcDdo5tI
    FcHS0S3FWSgq1ljm+lwbfUC1g/R2OuP7WImaE+2kKyuSOuUEtGSZrxkRcOd0y9kT
    a6oyZStu1s1JjYu+7LKCsMFbe5KPL0owG2JkTC9SAmowT68F8IwTcO4rmX9SzLYI
    CSjrtLndPsdcBZsjleTIqprK1Odznh0yYfwEDwMXLpZ/P3kmkSmMYOkgo9Dq0j+g
    VCyZgrT54l6zOpyydt4SLczVjfx+MJ5hSSMuKZ6/SUaIosD4+cjQhyppXP0+259r
    JprQvIYj8JLRy1hampPV579B2ZvLhtF0u1I=
    -----END CERTIFICATE-----

  server.cnf: |-
    # OpenSSL configuration file for creating a CSR for a server certificate
    # Adapt at least the FQDN and ORGNAME lines, and then run 
    # openssl req -new -config server.cnf -keyout server.key -out server.csr
    # on the command line.
    
    FQDN = smsf.uangel.com
    ORGNAME = UANGEL
    ORGUNIT = CoreTEch
    ALTNAMES = DNS:$FQDN   # , DNS:bar.sepp.uangel.com , DNS:www.sepp.uangel.com
    
    # --- no modifications required below ---
    [ req ]
    #default_bits = 2048
    #default_md = rsa
    prompt = no
    encrypt_key = no
    distinguished_name = dn
    req_extensions = req_ext
    
    [ dn ]
    C  = KO
    ST = KyeongKi
    L  = SeongNam
    O  = $ORGNAME 
    OU = $ORGUNIT 
    CN = $FQDN
    emailAddress = coretech@uangel.com
     
    [ req_ext ]
    subjectAltName = $ALTNAMES

  server.crt: |
    -----BEGIN CERTIFICATE-----
    MIIDpzCCAo8CCQDhi/ThQaV2zTANBgkqhkiG9w0BAQUFADCBlDELMAkGA1UEBhMC
    S08xDjAMBgNVBAgMBVNlb3VsMRAwDgYDVQQHDAdHYW5nTmFtMRgwFgYDVQQKDA9F
    eGFtcGxlUHVibGljQ0ExEjAQBgNVBAsMCUV4YW1wbGVDQTETMBEGA1UEAwwKcm9v
    dGNhLmNvbTEgMB4GCSqGSIb3DQEJARYRaXR0ZWNoQHJvb3RjYS5jb20wHhcNMTkw
    ODA2MDc1MDIwWhcNMjkwODAzMDc1MDIwWjCBlTELMAkGA1UEBhMCS08xETAPBgNV
    BAgMCEt5ZW9uZ0tpMREwDwYDVQQHDAhTZW9uZ05hbTEPMA0GA1UECgwGVUFOR0VM
    MREwDwYDVQQLDAhDb3JlVEVjaDEYMBYGA1UEAwwPc21zZi51YW5nZWwuY29tMSIw
    IAYJKoZIhvcNAQkBFhNjb3JldGVjaEB1YW5nZWwuY29tMIIBIjANBgkqhkiG9w0B
    AQEFAAOCAQ8AMIIBCgKCAQEAwEHVmU9ay5RYmTFeK5gZov3oClgR8VcrqEuTAPoo
    fo0zkG3mVwUCNuS+/2V/aOCNCFCIMo3wrObnvwBJwyJ87ITgQRN+g8iqZObjlIHM
    mYQ6ekRb8GjEJJ0aUDDQnsJiu/w1CeQFl98IDbLLQMqpMHmBQ0KVXwrDBmGxRHNs
    z9IAewWaraKQ1tX4fQalooydkSfqgiF8NNjY97lPO+jZ6EOnvM112lBrWvFvR8RD
    VHaQBjM+bITVkLftqREAO4HAVnAQ97s5Avrd5MjC1OtKAq1txfFYz6Zkpg60xbjO
    y4QqzrqHjAVDkqVF7OmbMPNo0pynb1QljAjVYyDMP3Gk3QIDAQABMA0GCSqGSIb3
    DQEBBQUAA4IBAQCAZrYNqP5Th6QRdmSLM9fEq7JO/a9AGGcn/FQPeOiGovTOwoyR
    t72Ep+SO4IHjVcPPD/6HPRBWnbNmzq/zqQ2gI5qpX28fWVo7BfOyfSbkkBtmnPVF
    Hi2+Bg2f+gnJh1B5g0OK24W7ApUG1vW9aDOPjwB/LDzSN5qRxCKJXTT0pK4f5pG/
    JD1gRggpgbqsM4EJ7lvwzE8PNikUsDKjro+gSFHQ0F0FrQE/Q8xxcIWFOVx0ABl8
    B/bclRH64PBFto6CHM1nQVuUEbWiY8gaf8OYbFIP3JPwAdxpg93Tttj5AYdxgsf4
    lpCyi4EBHC0Wn/oo2lMTPghC11Lkzs6gsSuq
    -----END CERTIFICATE-----

  server.csr: |
    -----BEGIN CERTIFICATE REQUEST-----
    MIIDCDCCAfACAQAwgZUxCzAJBgNVBAYTAktPMREwDwYDVQQIDAhLeWVvbmdLaTER
    MA8GA1UEBwwIU2VvbmdOYW0xDzANBgNVBAoMBlVBTkdFTDERMA8GA1UECwwIQ29y
    ZVRFY2gxGDAWBgNVBAMMD3Ntc2YudWFuZ2VsLmNvbTEiMCAGCSqGSIb3DQEJARYT
    Y29yZXRlY2hAdWFuZ2VsLmNvbTCCASIwDQYJKoZIhvcNAQEBBQADggEPADCCAQoC
    ggEBAMBB1ZlPWsuUWJkxXiuYGaL96ApYEfFXK6hLkwD6KH6NM5Bt5lcFAjbkvv9l
    f2jgjQhQiDKN8Kzm578AScMifOyE4EETfoPIqmTm45SBzJmEOnpEW/BoxCSdGlAw
    0J7CYrv8NQnkBZffCA2yy0DKqTB5gUNClV8KwwZhsURzbM/SAHsFmq2ikNbV+H0G
    paKMnZEn6oIhfDTY2Pe5Tzvo2ehDp7zNddpQa1rxb0fEQ1R2kAYzPmyE1ZC37akR
    ADuBwFZwEPe7OQL63eTIwtTrSgKtbcXxWM+mZKYOtMW4zsuEKs66h4wFQ5KlRezp
    mzDzaNKcp29UJYwI1WMgzD9xpN0CAwEAAaAtMCsGCSqGSIb3DQEJDjEeMBwwGgYD
    VR0RBBMwEYIPc21zZi51YW5nZWwuY29tMA0GCSqGSIb3DQEBCwUAA4IBAQCRqeJT
    RoHXh38v35nHfSjWtfb68nmdRzhkcFnXHkmoHXA3L2SzKB0A+vKpruuv0bwaug/h
    JxCyA+HIGGYbxVQo3bP407CMI+AU4d4XzF4o/X6s1cgfzA/LN6fd6DscZZVpLD/F
    jG6j24XRDo6tHjcmfpvMQX8P+D+Dk0ukyUP4A2nDMIFyKKqGzDcziSYi1GeqmqMU
    nPl/oPMpJuUsdIaHnnBYWvvvBYrQU3cNpki+bDO4utRPMyyvzwdm9RrU/2A3xo7P
    IgKP3RsO3UqGqXRfu49qw6l9xNBGA9hyuFCBe3RRocOlWTcIJciR2iE/Tz113gRW
    EiLSWERwK65RJ3fw
    -----END CERTIFICATE REQUEST-----

  server.key: |
    -----BEGIN PRIVATE KEY-----
    MIIEvwIBADANBgkqhkiG9w0BAQEFAASCBKkwggSlAgEAAoIBAQDAQdWZT1rLlFiZ
    MV4rmBmi/egKWBHxVyuoS5MA+ih+jTOQbeZXBQI25L7/ZX9o4I0IUIgyjfCs5ue/
    AEnDInzshOBBE36DyKpk5uOUgcyZhDp6RFvwaMQknRpQMNCewmK7/DUJ5AWX3wgN
    sstAyqkweYFDQpVfCsMGYbFEc2zP0gB7BZqtopDW1fh9BqWijJ2RJ+qCIXw02Nj3
    uU876NnoQ6e8zXXaUGta8W9HxENUdpAGMz5shNWQt+2pEQA7gcBWcBD3uzkC+t3k
    yMLU60oCrW3F8VjPpmSmDrTFuM7LhCrOuoeMBUOSpUXs6Zsw82jSnKdvVCWMCNVj
    IMw/caTdAgMBAAECggEBAITpPnyVYqSY8sM9YOfsZ9TJibAVAJqC8/iN/pvPVU1f
    2oT/pR0FpmlCrFQt2+4qRvW3juC8ReWSYCYoUdYoMorktY/npS//+uR0xmJ1dXev
    9Slvtsu18duKDJXhmWgX5GAnVJd43vEGTDAEKgWp1VtgtJ9GGbOx4e+4e+9hiJkG
    V0civiWbyPda8hzDHhkCR94ZO0KkSgMA7/6AeW0RVMGGPgM9/lVohsHfv5bsZIVJ
    lTIQPSoqE/WMbHpsn+YsXiQHEqDr67ZpDGcn7rdkHXk8xMyyqovVmC/VNLAjCuyc
    /TD5EkPpKkWFRopD6TDV72La4tyq6C9RMcvfIJIdE9UCgYEA5alN5tGBL681JbRV
    FurLXdkv0RVkWL/rhsnF/+BbQ2sr0HcwNARsj8+KBAcbDUD5TTH3BeA4lfwJVE6V
    SfoiijjD10xGLRDHVBmjyZ1SKxGveoR9MUcD9mmxzNxgukklTj58158jkTOCnTXL
    eRjMwkI/OpzTxPrDnxYYggL45gMCgYEA1k5eoQZ65nfYuxlw+ZIX3RngsBvYbn3a
    2CtQkbwaEU+YulEc2ZQr92A4oarO8oW/+kCeHJxIAolfn8MFBlJjpSd4IBuOj12S
    CR3+VOAMCz4HAevcF1B97eWtxrsTL2azieeiIFbFsVEYyw+IHTJpvdVNn2gZ6LvX
    8fcej6Y4Q58CgYAkEsHPvZyjFswsTfUHkn27EgA2wTtvzUV7eHoHRQBQyKarKe2C
    XieHNzwggdU38bq262A3pg59UIdOnMFKS2XdfCkWyj5Dmd0VUqmtY26ioTaE8gaQ
    FO2EaPmqifsPh6m6bopBfBekGQktFGQPc1vGL42q8TM6P4E2ncvfsAPUbQKBgQDH
    fWBdKLkS/JEFaaNezn3kVYhwpxsLj6A+BeQUJTNm1d9n4MWoTGO4/Rr6cxP9cj/I
    5onIPDpUEiivgUyWG++h92G9EandDs84KXFs9LqBZJYFVdck5Mq0v07KZa5wO3v5
    bWPgEqYob0NTEvwzoZAJJBwDvVYQ7XsRRGZwddx+JQKBgQCdVW7OchmPHMFnJhsu
    tON6K2k5Wi+MplzXwfWcodYUwT/tO8vzZm0bAFuSbRwjyGSNCRLcinDDLBHlSTFD
    HssBU9yZg7V54rZdWhF6aRf287BK6ow1DPxUPPfkhJlUAVNKPPoaF6CoD/bcqOo3
    d1uQLhyNzHkRSfbKw+YpN59iEg==
    -----END PRIVATE KEY-----

  server.p12.key: |
    usepp

  smsf.uangel.com.p12.key: |
    usmsf

  usmsf.conf: |-
    modules = [
    // 기본적으로 ulib 과 echolib 의 Defaults 가 필요합니다.
    ulib.Defaults
    mysqllib.Defaults
    echolib.Defaults
    upolicy.Defaults
    scpcli.Defaults
    scpcli.DisableOAuth

    // StartAllServer 를 포함 시키면, http-servers 에 리스트업된 모든 서버가 실행됩니다.
    echolib.StartAllServer

    // file trace 를 활성화 시키고
    #ulib.FileTrace
    // 모든 trace 를 남기게 합니다.
    #ulib.TraceAll

    ulib.NetH2cClient

    TraceMgr

    // limiter config를 구성하는 모듈입니다.
    ulib.LimiterConfigurator

    //echolib.mockup.NrfRegister

    // istio 환경에서 envoy sidecar를 사용하는 경우 ulib.NopResolver 사용
    ulib.NopResolver

    //CertFileWatcherModule

    UsmsfDefaults

    HealthCheckerModule

    # UCCMS-Agent 서비스 모듈
    agent.EventListener
    agent.EventListenerService
    agent.AgentService

    # UCCMS-Consumer 모듈
    consumer.Watcher

    {{ if eq .Values.configmap.usmsfConf.usePprof true }}
    ulib.pprof
    {{ end }}
    ]

    runtime {
        go-max-procs = 64
    }
    
    // trace 가 저장될 디렉토리입니다.
    trace {
        trace-home = "/tmp/traces"
        trace-log-pattern= """
        {{ "{{" }}- if eq .Logs.kind "request" -{{ "}}" }}
            {{ "{{" }}- if eq (index .Tags "span.kind") "server" -{{ "}}" }}
    >>>>> Receive Request: {{ "{{" }} .ID {{ "}}" }}
            {{ "{{" }}- else -{{ "}}" }}
    >>>>> Send Request: {{ "{{" }} .ID {{ "}}" }}
            {{ "{{" }}- end -{{ "}}" }}
            {{ "{{" }}- if eq .Tags.proto "http" {{ "}}" }}
    URL: {{ "{{" }} index .Tags "http.url" {{ "}}" }}
    Method: {{ "{{" }} index .Tags "http.method" {{ "}}" }}
                {{ "{{" }}- if .Logs.header {{ "}}" }}
    {{ "{{" }} "" {{ "}}" }}
    Header:
    {{ "{{" }} .Logs.header {{ "}}" }}
                {{ "{{" }}- end {{ "}}" }}
                {{ "{{" }}- if .Logs.request {{ "}}" }}
    Body:
    {{ "{{" }} .Logs.request.Pretty "  " {{ "}}" }}
                {{ "{{" }}- end -{{ "}}" }}
            {{ "{{" }}- end -{{ "}}" }}
            {{ "{{" }}- if eq .Tags.proto "sql" {{ "}}" }}
    SQL: {{ "{{" }}.Logs.sql{{ "}}" }}
    Params: {{ "{{" }}.Logs.params{{ "}}" }}
            {{ "{{" }}- end -{{ "}}" }}
        {{ "{{" }}- end -{{ "}}" }}
        {{ "{{" }}- if eq .Logs.kind "response" {{ "}}" }}
            {{ "{{" }}- if eq (index .Tags "span.kind") "server" {{ "}}" }}
    <<<<< Send Response: {{ "{{" }}.ID {{ "}}" }}
            {{ "{{" }}- else -{{ "}}" }}
    >>>>> Receive Response: {{ "{{" }}.ID {{ "}}" }}
            {{ "{{" }}- end -{{ "}}" }}
            {{ "{{" }}- if eq .Tags.proto "http" {{ "}}" }}
    URL: {{ "{{" }}index .Tags "http.url" {{ "}}" }}
    StatusCode: {{ "{{" }} index .Logs "http.status_code" {{ "}}" }}
                {{ "{{" }}- if .Logs.header {{ "}}" }}
    {{ "{{" }} "" {{ "}}" }}
    Header:
    {{ "{{" }} .Logs.header {{ "}}" }}
                {{ "{{" }}- end {{ "}}" }}
                {{ "{{" }}- if .Logs.response {{ "}}" }}
    Body:
    {{ "{{" }} .Logs.response.Pretty "  " {{ "}}" }}
                {{ "{{" }}- end -{{ "}}" }}
            {{ "{{" }}- end -{{ "}}" }}
            {{ "{{" }}- if eq .Tags.proto "sql" {{ "}}" }}
    RowsSelected: {{ "{{" }}.Logs.rowsSelected {{ "}}" }}
    RowsAffected: {{ "{{" }}.Logs.rowsAffected {{ "}}" }}
            {{ "{{" }}- end -{{ "}}" }}
            {{ "{{" }}- if .Logs.error {{ "}}" }}
    Error: {{ "{{" }}.Logs.error {{ "}}" }}
            {{ "{{" }}- end -{{ "}}" }}
        {{ "{{" }}- end -}}
    {{ "{{" }}print "\n\n"{{ "}}" }}"""
    }
    
    // map 서버가 사용할 go routine pool 입니다.
    MapServerPool {
        type = alarmPool
        pool-size = 200
        // server 의 request-timeout 에 맞춰 설정하세요
        max-queueing-duration = 3s
    }
    
    // smsf 서버가 사용할 go routine pool 입니다.
    servicePool {
        type = alarmPool
        pool-size = 200
        // server 의 request-timeout 에 맞춰 설정하세요
        max-queueing-duration = 5s
    }
    
    // uccms 서버가 사용할 go routine pool 입니다.
    UCCMSServerPool{
        type = alarmPool
        pool-size = 200
        // server 의 request-timeout 에 맞춰 설정하세요
        max-queueing-duration = 2s
    }
    
    # API 서버가 사용할 go routine pool
    apiServicePool {
        type = alarmPool
        pool-size = 200
        max-queueing-duration = 2s # server 의 request-timeout 에 맞춰 설정 할 것
    }
    
    // http 서버 설정입니다.
    http-servers {
    
        // 내부 management 용으로 8011 서버를 실행합니다. tls 아닙니다. 내부 연동은 tls연동을 사용하지 않습니다.
        map {
            port = 8011
            tls = false
            serve-for = internal
            metric-registry = nf
            // 용도별로 worker pool을 분리하여 사용합니다. 
            exec-context = MapServerPool 
    
            // request 를 timeout 처리할 시간
            request-timeout = 3s
    
            // 적용할 limiter 를 설정
            limiter = internal
    
            services {
                // map-v1 서비스를 활성화 시킵니다.
                map-v1 {
                    // 서비스의 prefix 는 /mgmt/smsf 입니다.
                    prefix = /internal/v1
    
                    // localhost 와 192.168.3.xxx  에서만 이 서비스를 사용할 수 있습니다.
                    allowed-roles = [
                    //    "ip:localhost" , 
                    //    "ip:192.168.3.0/24"
                    ]
                }
            }
        }
    
        // 외부 NF 용으로 8001 서버를 실행합니다. tls 입니다.
        smsf {
            port = 8001
            #tls = true
            tls = false
            serve-for = NF
            metric-registry = nf
            exec-context = servicePool
    
            // 적용할 limiter 를 설정
            limiter = external
    
            // request 를 timeout 처리할 시간 (context 유지 시간)
            request-timeout = 5s
    
            services {
                // smsf-v1 서비스를 활성화 시킵니다.
                smsf-v1 {
                    // 규격대로 prefix 를 설정합니다.
                    prefix = "/nsmsf-sms/v1"
                    version = "1.0.0"
    
                    // oauth 토큰이 있는 NF 만 허용합니다.
                    allowed-roles = [
                        //oauth
                        //["iss:b70cb766-8b50-4c35-948e-7f5369c4a38d" , "scope:nsmsf-sms"]
                    ]
                }
            }
        }
    
        uccms {
            port = {{ .Values.global.smsf.serverPort.forConfigMgr.http }}
            tls = false
            serve-for = internal
            metric-registry = uccms
            // 용도별로 worker pool을 분리하여 사용합니다. 
            exec-context = UCCMSServerPool 
    
            //연동할 UCCMS 접속 정보
            uccmshost = "{{ .Values.global.serviceName.uccms}}.{{ .Release.Namespace }}.svc.{{ .Values.global.dnsName.zone }}"
            uccmsport = "{{ .Values.global.port.uccms.servicePort }}"
    
            config {
                scheme = "http"
                use = "svc"
        
                decisionMetaPath = /home/app/config/rselec_meta.json
                smsfMetaPath = /home/app/config/smsf_meta.json
                smscMeteaPath = /home/app/config/smsc_meta.json
        
                udecisionPath = /home/app/config/rselec_config.json
                usmsfPath = /home/app/config/smsf_config.json
                usmscPath = /home/app/config/smsc_config.json
            }
    
            // request 를 timeout 처리할 시간
            request-timeout = 3s
    
            // 적용할 limiter 를 설정
            limiter = internal
    
            services {
                // smsf-v1 서비스를 활성화 시킵니다.
                uccms-v1 {
                    // 서비스의 prefix 는 /mgmt/smsf 입니다.
                    //prefix = /internal/v1
    
                    // localhost 와 192.168.3.xxx  에서만 이 서비스를 사용할 수 있습니다.
                    allowed-roles = [
                    //    "ip:localhost" , 
                    //    "ip:192.168.3.0/24"
                    ]
                }
            }
        }
     
        # UCCMS-Agent의 이벤트 리스너 서버 설정
        event-listener {
            host = 0.0.0.0 # agent-specific
            # TODO 변수로...
            port = 11090
            api-uri = /uccms-agent/v1/notifications # agent-specific
     
            tls = false
            serve-for = internal       
            # metric-registry = mgmt       
            exec-context = apiServicePool # 용도별로 worker pool을 분리하여 사용
            request-timeout = 2s       
            limiter = internal # 적용할 limiter 를 설정
        }
    }
    
    service {
        my-profile-file = "smsf-profile.json"
        reloadable-configs {
            //service = smsf-service.json
            //policy = smsf-policy.json
            //not-yet-created = never-created.json
    
            # TODO uuid 변수화
            udecisionPath = /home/app/uccms/configurations/rselec_config.abbd4a34-e00c-4333-887f-6de44c2521e8.json
        }
    }
    
    # UCCMS-Agent 서비스 설정
    agent-service {
        uccms {
            host = "{{ .Values.global.serviceName.uccms}}.{{ .Release.Namespace }}.svc.{{ .Values.global.dnsName.zone }}"
            port = {{ .Values.global.port.uccms.servicePort }}
            apiUri = /uccms/v1
            tls = false
        }
        preregistrations-path = /home/app/uccms/preregistrations
        configurations-path = /home/app/uccms/configurations
        preregistration-retry-delay = 5s
        heartbeat-interval = 1m
        heartbeat-max-retries = 3
    } 
    
    http-client {
        scheme {
            sigtran = http
            diameter = http
        }
    
        circuit-breaker {
            // interval 안에 5xx 에러가  연속으로 consecutiveErrors 이상 발생하면 
            // baseEjectionTime 기간동안  ejection 됩니다.
            // 다음은 설정하지 않았을 경우의 default 값입니다.
     
            // 10초안에 5번 연속으로 5xx 에러가 발생하면 , 해당 서버는 30초 동안 사용하지 않습니다.
            // 해당 서버로 전송하는 request 는 즉시 BadGateway 에러를 리턴합니다.
            consecutiveErrors = 5
            interval = 10s
            baseEjectionTime = 30s
     
            // response를 받지 못한 request 의 최대 개수입니다.
            // 최대개수를 넘어가면 즉시 BadGateway 에러를 리턴합니다.
            maxPendingRequest = 1024
        }
    }
    
    // failover db 설정입니다.
    smsf-db {
        // 시험용이어서 db 1개만 추가했습니다.
        //db = [ mockup1 ]
        db = [ mariadb ]
    }
    
    mariadb {
        dsn = mysql
        driver = mysql
         
        {{- if eq .Values.global.cloudPlatform "AWS" }}
        host = "{{ .Values.global.aws.dbEndPoint }}"
        {{- else }}
        host = "{{ .Values.global.serviceName.mariadb }}.{{ .Release.Namespace }}.svc.{{ .Values.global.dnsName.zone }}"
        {{- end }}
           
        user = root
        password = root.123
         
        dbname = smsf
    
        pool = mysqlpool

        max-open-conns = 56
        max-idle-conns = 56
    }
    
    mysqlpool {
        type = alarmPool
        //pool-size = 20
        pool-size = 200
    }
    
    // db 가 사용할 go routine pool 입니다.
    dbPool {
        type = alarmPool
        pool-size = 20
    }
    
    // 시험용 DB 입니다 .
    mockup1 {
        // driver 는 mockup 을 사용합니다. main.go 의 init 에서 등록한 driver 입니다 .
        golang-sql-driver = "mockup"
        
        // dbPool 을 pool 로 사용합니다.
        pool = dbPool
    
        // 기타 접속 설정입니다.
        dsn = "mysql"
    }
    
    redis {
        local-store {
            server.uri = {{ .Values.configmap.usmsfConf.redis.localStore.serverURI | quote }}
            ping-interval = {{ .Values.configmap.usmsfConf.redis.localStore.pingInterval }}
            key-expire-timeout = {{ .Values.configmap.usmsfConf.redis.localStore.keyExpireTimeout }}
        }
    
        pub-sub {
            server.uri = {{ .Values.configmap.usmsfConf.redis.pubSub.serverURI | quote }}
            ping-interval = {{ .Values.configmap.usmsfConf.redis.pubSub.pingInterval }}
            channel = smsf
        }
    }
    
    // 서버 인증서 및 ca list 파일 설정입니다.
    cert-store {
        // unrf 가 sign 한 임시 인증서를 사용합니다.
        //common-name = "smsf.localhost.uangel.com"
        //issuer = unrf
    
        //cert-file = ${ULIB_DIR}/resources/certs/wildcards.uangel.com/cert.pem
        //key-file = ${ULIB_DIR}/resources/certs/wildcards.uangel.com/key.pem
    
        cert-file = ./cert.pem
        key-file = ./key.pem
    
        //cert-file = ./wildcards_cert.pem
        //key-file = ./wildcards_key.pem
    
        //cert-file = ./unrf_cert.pem
        //key-file = ./unrf_key.pem
    
        peer-certs-file = /home/app/config/camel_git_cert.pem
    
        named {
            unrf {
                cert-file = /home/app/config/cert.pem
                key-file = /home/app/config/key.pem
            }
        }
    }
    
    // 인증서 감시 관련 설정
    cert-file-watcher {
    
        // 인증서 만료 며칠 전에 통보할 것인지 설정 
        days-before-expiration-for-noti = 30
    
        // 인증서 만료 또는 임박 여부 검사 주기
        cert-expiration-check-interval = 5s
    
        alarms {
            generator-name = "usmsf"
    
            // "인증서 파일이 변경되었음"
            cert-file-changed {
                key-name = "CertFileChanged"
                clear-after = 5s
            }
    
            // "인증서가 곧 만료됨"
            cert-will-be-expired {
                key-name = "CertWillBeExpired"
                clear-after = 2m
            }
    
            // "인증서가 만료되었음"
            cert-expired {
                key-name = "CertExpired"
                clear-after = 3m
            }
        }
    }
    
    alarm-manager.fire-interval = 1m
    //alert-manager.address = "http://127.0.0.1:9093"
    
    // jwt key 정보입니다. RS256 이나 ES256 을 사용하는 경우는 아래와 같이 인증서 파일을 지정하면 됩니다.
    jwt-keys {
        b70cb766-8b50-4c35-948e-7f5369c4a38d {
            cert = /home/app/config/cert.pem
        }
    }
    
    // limiter 설정파일을 지정합니다.
    // limiter.config-file = "/home/app/config/limiter.conf"
    
    
    // log 설정입니다.
    logrus {
        config-file = "/home/app/config/usmsf_logger.conf"
    }
    
    // metric registry는 서버별로 분리되고,  udb dao용도 별도로 분리되어 있습니다.
    metric {
        mgmt {
            reporters = [
                {
                   class = "logger"
                   logger = mgmt_stat
                   interval = 10s
                   enabled.type = [ TransactionTimer , Meter ]
                   filter-per-type {
                       Meter {
                           enabled.prefix = [ "mgmt" ]
                       }
                   }
                },
            ]
        }
    
        nf {
            reporters = [
                {
                   class = "csv"
                   #file-path = ${USMSF_HOME}/stat/nf
                   file-path = /tmp/stat/nf
                   interval = {{ .Values.configmap.usmsfConf.metric.nf.reportInterval }}
                   enabled.type = [ TransactionTimer, Meter, Counter ]
                   filter-per-type {
                       TransactionTimer {
                           enabled.prefix = [ "service.operation" ]
                       }
                       Meter {
                           enabled.prefix = [ "service" ]
                       }
                       Counter {
                           enabled.prefix = [ "service.error" ]
                       }
                   }
                },
            ]
        }
    
        dao {
            reporters = [
                {
                   class = "logger"
                   logger = dao_stat
                   interval = 10s
                   enabled.type = [ TransactionTimer ]
                },
            ]
        }
    
        scpcli {
            reporters = [
                {
                   class = "logger"
                   logger = scpcli_stat
                   interval = 10s
                   enabled.type = [ TransactionTimer ]
                   
                },
            ]
        }
    }
    
    scpcli {
        nf-instance-id = "d1443c16-bf97-46c2-8633-d396161e911c"
        nf-type = "SMSF"
    }

    
    smsf-profile {
        uecm-regi {
            supported-features = ""
            plmn-id {
                mcc: 450
                mnc: 06
            }
            smsf-map-address = ""
            smsf-diameter-address {
                name = smsf
                realm = usmsf-svc.{{ .Release.Namespace }}.svc.{{ .Values.global.dnsName.zone }}
            }
        }
        callback-url = "http://uangel.com"
    }
     
    nrfclient {
        nrf.uri = "http://usmsf-nrf-sim.{{ .Values.global.simNamespace }}.svc.{{ .Values.global.dnsName.zone }}:8080"
    }
     
    policy-based-selector {
            // nf type 입니다.
        nftype-dyn-UDM {
            // NRF Discovery 결과에 적용할 dataframe pipeline 입니다.
             dataframe-pipelines : [
    
                // nfStatus 로 필터링합니다.
                {
                    action : filter
                    expr : """record.nfStatus == "REGISTERED" """
                } ,
                // open 할 때 지정한 version 으로 필터링합니다.
                {
                    action : filter
                    expr : """ fn.checkRequiredVersion(record.nfServices , factor.versions)"""
                },
                // nfServices 배열을 record 로 변환합니다.
                {
                    action : explode-array
                    column : nfServices
                },
                // nfServiceStatus로 필터링합니다.
                {
                    action : filter
                    expr : """record.nfServices.nfServiceStatus == "REGISTERED" """
                } ,
                // nfServices와 udmInfo 아래에 있는 attribute 를 컬럼으로 꺼냅니다.
                {
                    action : new-value
                    new-value : {
                        priority : "record.nfServices.priority" ,
                        groupId : "record.udmInfo.groupId"
                    }
                } ,
                // supi 의 mccmnc 를 이용해 해당하는 plmn의 nf 만 골라냅니다.
                {
                    action : filter
                    onlyWhen : """factor.supi != "" && !fn.isNil(record.plmnList)"""
                    expr : "fn.isHomePlmn(factor.supi , record.plmnList)"
    
                } ,
                // routingIndicator 를 사용하여 필터링합니다.
                 {
                    action : filter
                    onlyWhen : """factor.routingIndicator != "" && factor.routingIndicator != "0" && !fn.isNil(record.udmInfo.routingIndicators)"""
                    expr : "!fn.isNil(fn.findOne(record.udmInfo.routingIndicators, ^(ri) => ri == factor.routingIndicator))"
                    mark : {
                        "byRoutingIndicators" : true
                    }
                } ,
                // supiRange 를 사용하여 필터링합니다.
                {
                    action : filter
                    onlyWhen : """factor.supi != "" && !fn.isNil(record.udmInfo.supiRanges)"""
                    expr : "fn.checkIdentifyRange(factor.supi , record.udmInfo.supiRanges)"
                } ,
                // gpsiRange 를 사용하여 필터링합니다.
                {
                    action : filter
                    onlyWhen : """ factor.gpsi != "" && !fn.isNil(record.udmInfo.gpsiRanges)"""
                    expr : "fn.checkIdentifyRange(factor.gpsi , record.udmInfo.gpsiRanges)"
                } ,
                // 살아 남은 NF를   정렬합니다.  routingIndicator에 의해 필터된것을 우선으로 하고,  그 다음으로는 priority 를 봅니다.
                {
                    action : sort
                    orders : [
                        {
                            column : byRoutingIndicators
                        },
                        {
                            column : priority ,
                            order : asc
                        }
                    ]
                } ,
             ]
        }
    
        nftype-dyn-UDM-Params {
           dataframe-pipelines : [
             {
                action : new-value
                change-value : {
                    supi : """fn.replaceLastNChars(record.supi , 5 , "0")"""
                }
              }
           ]
        }
    }
    
    timer {
        internal-router {
            service-request-timeout = {{ .Values.configmap.usmsfConf.timer.internalRouter.serviceRequestTimeout }}
        }
    
        scp-client {
            discovered-cache-keeping-time = {{ .Values.configmap.usmsfConf.timer.scpClient.discoveredCacheKeepingTime }}
            service-request-timeout = {{ .Values.configmap.usmsfConf.timer.scpClient.serviceRequestTimeout }}
        }
    }
    
    n1n2-message {
            smsf-noti-url = ${?USMSF_FAILNOTI} // http://127.0.0.1:8001
    }
    
    non-define {
            my-fqdn = ${?USMSF_FQDN}
            my-secret-key = "5g-smsf-uangel"
    }
    
    health-checker {
    
        # kubelet으로부터 liveness/readiness probe 요청을 수신할 포트
        listen-port = {{ .Values.configmap.usmsfConf.healthCheck.listenPort }}
    
        liveness {
            # true인 경우에만 liveness checker 동작
            enabled = {{ .Values.configmap.usmsfConf.healthCheck.livenessCheck.enabled }}
    
            # true:  백그라운드에서 주기적으로 liveness 검사 (주기: async-check-interval)
            # false: kubelet으로부터 liveness probe 수신 시에만 liveness 검사
            use-async-check = {{ .Values.configmap.usmsfConf.healthCheck.livenessCheck.useAsyncCheck }}
    
            # use-async-check=true인 경우에만 유효
            async-check-interval = {{ .Values.configmap.usmsfConf.healthCheck.livenessCheck.asyncCheckInterval }}
    
            simulation-mode {
                # 시험 편의를 위한 것으로, true인 경우 실제 정상 동작하지 않고 return-error 값에 따라 동작한다.
                # (실제 상용에서는 반드시 false로 설정되어야 함.)
                enabled = {{ .Values.configmap.usmsfConf.healthCheck.livenessCheck.simulationMode.enabled }}
    
                # true인 경우, probe에 대한 응답으로 실패를, false인 경우 성공을 반환한다.
                return-error = {{ .Values.configmap.usmsfConf.healthCheck.livenessCheck.simulationMode.returnError }}
            }
        }
    
        readiness {
    
            # 각 필드 설명은 liveness 참조
    
            enabled = {{ .Values.configmap.usmsfConf.healthCheck.readinessCheck.enabled }}
            use-async-check = {{ .Values.configmap.usmsfConf.healthCheck.readinessCheck.useAsyncCheck }}
            async-check-interval = {{ .Values.configmap.usmsfConf.healthCheck.readinessCheck.asyncCheckInterval }}
            simulation-mode {
                enabled = {{ .Values.configmap.usmsfConf.healthCheck.readinessCheck.simulationMode.enabled }}
                return-error = {{ .Values.configmap.usmsfConf.healthCheck.readinessCheck.simulationMode.returnError }}
            }
        }
    }

  usmsf_logger.conf: |
    loggers {
        root {
            level = {{ .Values.configmap.usmsfConf.logger.logLevels.root | quote }}
            appender = [
                console
            ]
        }

        com.uangel {
            level = {{ .Values.configmap.usmsfConf.logger.logLevels.com_uangel | quote }}
            additivity = true
            appender = [
                com_uangel
            ]
        }

        call.log {
            level = "INFO"
            additivity = true
            appender = [
                calllog
            ]
        }

        dao_stat {
            appender = [ dao_stat ]
            additivity = false
        }

        scpcli_stat {
            appender = [ scpcli_stat ]
            additivity = false
        }

        nf_stat {
            appender = [ nf_stat ]
            additivity = false
        }

        metric {
            additivity =  false
            appender = [
                metric
            ]
        }

        samsung {
            fault {
                level = {{ .Values.configmap.usmsfConf.logger.logLevels.samsung.fault | quote }}
                appender = [ samsung_alarm, samsung_console ]
            }
            selfdiag {
                level = {{ .Values.configmap.usmsfConf.logger.logLevels.samsung.selfdiag | quote }}
                appender = [ samsung_diag, samsung_console ]
            }
            reset {
                level = {{ .Values.configmap.usmsfConf.logger.logLevels.samsung.reset | quote }}
                appender = [ samsung_diag, samsung_console ]
            }
            init {
                level = {{ .Values.configmap.usmsfConf.logger.logLevels.samsung.init | quote }}
                appender = [ samsung_diag, samsung_console ]
            }
            config {
                level = {{ .Values.configmap.usmsfConf.logger.logLevels.samsung.console | quote }}
                appender = [ samsung_diag, samsung_console ]
            }
            error {
                level = {{ .Values.configmap.usmsfConf.logger.logLevels.samsung.error | quote }}
                appender = [ samsung_app, samsung_console ]
            }
            event {
                level = {{ .Values.configmap.usmsfConf.logger.logLevels.samsung.event | quote }}
                appender = [ samsung_app, samsung_console ]
            }
            info {
                level = {{ .Values.configmap.usmsfConf.logger.logLevels.samsung.info | quote }}
                appender = [ samsung_app, samsung_console ]
            }
        }
    }

    appenders {
        console {
            format = "text"
            class = "Console"
            print-caller = true
        }

        samsung_console {
            format = "samsung"
            class = "Console"
            print-caller = true
        }

        com_uangel {
            format = "text"
            class = "File"
            file = ${?USMSF_HOME}/logs/usmsf.log
        }

        dao_stat {
            format = "ulib.text"
            class = "RollingFile"
            print-caller = false
            file-name-pattern = "/tmp/stat/dao_stat.log.%Y%m%d"
        }

        scpcli_stat {
            format = "ulib.text"
            class = "RollingFile"
            print-caller = false
            file-name-pattern = "/tmp/stat/scpcli_stat.log.%Y%m%d"
        }

        nf_stat {
            format = "ulib.text"
            class = "RollingFile"
            print-caller = false
            file-name-pattern = "/tmp/stat/nf_stat.log.%Y%m%d"
        }

        calllog {
            format = "text"
            class = "File"
            file = ${?USMSF_HOME}/logs/call.log
        }

        metric {
            format = "text"
            class = "File"
            file = ${?USMSF_HOME}/logs/metric.log
        }

        samsung_alarm {
            format = "samsung"
            class = "RollingFile"
            file-name-pattern = ${?USMSF_HOME}/logs/alarm.log.%Y%m%d
        }

        samsung_diag {
            format = "samsung"
            class = "RollingFile"
            file-name-pattern = ${?USMSF_HOME}/logs/diag.log.%Y%m%d
        }

        samsung_app {
            format = "samsung"
            class = "RollingFile"
            file-name-pattern = ${?USMSF_HOME}/logs/app.log.%Y%m%d
        }
    }
